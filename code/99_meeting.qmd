---
title: "Document de synthèse pour la réunion du 21 mars 2025"
date: today
author: Amaël Le Squin
date-format: iso
filters:
  - fontawesome
  - siunitx-quarto
  - diagram
diagram:
  engine:
    tikz:
      execpath: lualatex
      header-includes:
        \usepackage{pgfplots}
        \pgfplotsset{compat=1.18}
        \usepgfplotslibrary{fillbetween}
        \usetikzlibrary{arrows.meta}
        \usetikzlibrary{positioning}
        \usetikzlibrary{calc}
        \definecolor{trunkCol}{HTML}{FFAF37}
        \makeatletter
          \tikzset{
          database/.style={
          path picture={
          \draw[fill = trunkCol] (0, 1.5*\database@segmentheight) circle [x radius=\database@radius,
          y radius=\database@aspectratio*\database@radius];
          \draw (-\database@radius, 0.5*\database@segmentheight) arc [start angle=180,end angle=360,x radius=\database@radius,
          y radius=\database@aspectratio*\database@radius];
          \draw (-\database@radius,-0.5*\database@segmentheight) arc [start angle=180,end angle=360,x radius=\database@radius,
          y radius=\database@aspectratio*\database@radius];
          \draw (-\database@radius,1.5*\database@segmentheight) -- ++(0,-3*\database@segmentheight) arc [start angle=180,end angle=360,
          x radius=\database@radius, y radius=\database@aspectratio*\database@radius] -- ++(0,3*\database@segmentheight);
          },
          minimum width=2*\database@radius + \pgflinewidth,
          minimum height=3*\database@segmentheight + 2*\database@aspectratio*\database@radius + \pgflinewidth,
          },
          database segment height/.store in=\database@segmentheight,
          database radius/.store in=\database@radius,
          database aspect ratio/.store in=\database@aspectratio,
          database segment height=0.1cm,
          database radius=0.25cm,
          database aspect ratio=0.35,
          }
        \makeatother
        \tikzset{arrow/.style = {> = {Latex[length = 1.2mm]}}}
pdf-engine: lualatex
keep-tex: true
execute:
  error: true
  echo: false
bibliography: references.bib
lightbox:
  match: auto
css: style.css
knitr:
  opts_chunk: 
    dev: ragg_png
    crop: null
    out.width: "70%"
    fig.width: 6
    fig.asp: 0.618
    fig.align: "center"
format:
  html:
    toc: true
    include-in-header: mathjax.html
    code-fold: true
    df-print: paged
    number-sections: true
    theme:
      light: cerulean
      dark: darkly
    margin: 5% 0;
  pdf:
    mathspec: true
    include-in-header:
      - text: |
          \usepackage{unicode-math}
          \usepackage{siunitx}
    number-sections: true
---

<!-- Shortcut for text -->
\newcommand{\ie}{\textit{i.e.},}
\newcommand{\eg}{\textit{e.g.},}

<!-- Shortcut for math -->
\newcommand{\Fbft}{F_{\text{BFT}}}
\newcommand{\fmax}{f_{\text{max}}}
\newcommand{\hdec}{h_{\text{dec}}}
\newcommand{\Vbft}{V_{\text{BFT}}}
\newcommand{\Vtot}{V_{\text{tot}}}

<!-- Math operators -->
<!-- \DeclareMathOperator{\diag}{diag} -->
<!-- \DeclareMathOperator{\logit}{logit} -->
<!-- \DeclareMathOperator{\mvn}{MVN} -->
<!-- \DeclareMathOperator{\N}{\mathcal{N}} -->

## Info réunion:
21.03.2025 à 10h00: [{{< fa solid at title="Réunion teams" >}} Lien Teams](https://teams.microsoft.com/l/meetup-join/19%3ameeting_MzNiZDA3ZmMtMDNjNy00NzE5LWFjNzMtNjcxZjcxZjBkNjhh%40thread.v2/0?context=%7b%22Tid%22%3a%223876b373-7e2c-4857-b024-53326b5b4bb2%22%2c%22Oid%22%3a%228ea3b1a4-f284-4393-957d-b97b8cc75dc7%22%7d)

## Contexte

Le projet Alamod, financé par le pepr FairCarboN, a pour objectif de faire une nouvelle estimation du volume aérien total, $\Vtot$, des arbres sur les placettes IFN et de croiser ces données avec les estimations de densité (projet XyloDensMap, XDM) afin d'en déduire la biomasse puis le stockage de carbone des forêts françaises. Dans un même temps, l'IGN a proposé de revoir ses tarifs de volume bois-fort tige, $\Vbft$, afin de s'assurer que $\Vbft \leqslant \Vtot$. Autrement dit, il est proposé de revoir la chaîne de calcul volume, biomasse, carbone:

```tikz
\begin{tikzpicture}
	\node (vol) at (0, 0) {Volume};
	\node[below = of vol.mid east, anchor = mid east] (dens) {Densité};

	\path (vol.mid east) -- (dens.mid east) node[midway, right = 0.8cm, anchor = mid west] (bio) {Biomasse};
	\draw[->, arrow, out = 0, in = 180] (vol.mid east) to (bio.mid west);
	\draw[->, arrow, out = 0, in = 180] (dens.mid east) to (bio.mid west);

	\node[right = 0.8cm of bio.mid east, anchor = mid west] (C) {Carbone};
	\draw[->, arrow] (bio.mid east) to (C.mid west);

	\node[database, above left = 0.3cm of vol, label = above:Emerge, database radius = 0.3cm,
		database segment height = 0.15cm] (emerge) {};

	\node[database, below left = 0.3cm of dens, label = below:XyloDensMap, database radius = 0.3cm,
		database segment height = 0.15cm] (xdm) {};

	\draw[->, arrow, dashed, out = -90, in = 180] (emerge.south) to (vol.mid west);
	\draw[->, arrow, dashed, out = 90, in = 180] (xdm.north) to (dens.mid west);
\end{tikzpicture}
```

Dans ce document, je présente les données (@sec-data) et les tarifs existants (@sec-hist), puis les pistes explorées/explorables pour le volume total et bois-fort tige (@sec-sec-pistes).

## Données {#sec-data}
Afin de comprendre les données, je définis d'abords ce qu'est un arbre dans la @sec-treePart puis je montre les distributions des données dans la @sec-dataDistrib

### Définition d'un arbre IGN {#sec-treePart}

Les arbres sont partitionnés en éléments hiérarchique par les inventaires forestiers nationaux (\eg @fig-partition). les Définitions des éléments peuvent varier entre inventaires, et ne contaignent pas forcément les mêmes données. Dans notre cas, les données proviennent de différents instituts et différentes périodes:

1.  Protocole Oudin, données préservées par l'INRA, entre 1930 and 1980 (<span class="egypt_red"></span> sur la @fig-map).

2.  Inventaire forestier (<span class="egypt_blue"></span> on the @fig-map), entre 1988 to 2007.

3.  L'Office National des Forêts (ONF), avec un protocole de 1972 et de 1983. Données non-utilisées pour l'instant car coordonées absentes et j'aimerais peut-être inclure des prédicteurs climatiques.

4.  Institut Technologique Forêt, Cellulose, Bois-construction, Ameublement (FCBA), pas explorées pour l'instant.

5.  L'Institut pour le développement forestier (IDF), R&D du Centre National de la Propriété Forestière et de l'Institut national de recherche en sciences et technologies pour l'environnement et l'agriculture (IRSTEA, maintenant INRAE), pas explorées pour l'instant.

```{mermaid}
%%| label: fig-partition
%%| fig-cap: Partition d'un arbre (inspiré de @Gschwantner2009)
%%| fig-width: 7
flowchart LR
subgraph SUB0 [Level 0]
	W(Arbre complet)
end

subgraph SUB1 [Level 1]
	W --> A(Aérien)
	W --> B(Souterain)
end

subgraph SUB2 [Level 2]
	A --> M(Tronc)
	A --> L(Latéral)
	A --> F(Feuilles)

	B --> E(...)
end

subgraph SUB3 [Level 3]
	M --> S(Top tronc)
	M --> MB(Grume)
	M --> MS(Souche)
	L --> LB(Grosse branches)
	L --> SB(Petites branches)
end

style SUB0 fill: #CCCCCC, color: #112233
style SUB1 fill: #CCCCCC, color: #112233
style SUB2 fill: #CCCCCC, color: #112233
style SUB3 fill: #CCCCCC, color: #112233

style W fill: #99DDFF, color: #030303

style A fill: #99DDFF, color: #030303
style B fill: #99DDFF, color: #030303

style M fill: #99DDFF, color: #030303
style L fill: #99DDFF, color: #030303
style F fill: #99DDFF, color: #030303
style E fill: #99DDFF, color: #030303

style S fill: #99DDFF, color: #030303
style MB fill: #99DDFF, color: #030303
style MS fill: #99DDFF, color: #030303
style LB fill: #99DDFF, color: #030303
style SB fill: #99DDFF, color: #030303

```

J'utilise les définitions (inspirées de @Gschwantner2009, voir @fig-partition et @fig-treeDef) pour les différentes parties d'un arbre:

- Tronc: Tige principale avec dominance apicale
	- Top tronc: La partie du tronc au dessus du diamètre de découpe \qty{7}{\centi\metre}
	- Grume: Partie du tronc entre la souche et la top
	- Souche: Partie qui resterait après une coupe suivant des pratiques normales d'abattage.
- Latéral:
	- Grosses branches: Portions latérales avec diamètre supérieur ou égal à \qty{7}{\centi\metre}
	- Petites branches: Portions latérales avec diamètre inférieur à \qty{7}{\centi\metre}

![Partitionnement, avec le tronc (<span class="egypt_green"></span>), le top (<span class="egypt_yellow"></span>), grosses branches (<span class="egypt_blue"></span>), et petites branches (<span class="egypt_red"></span>)](img/tree_ign.png){#fig-treeDef}

### Distribution des données {#sec-dataDistrib}
```{r}
#| output: false
#### Clear space and load packages
rm(list = ls())
graphics.off()

options(max.print = 500)

library(data.table)
library(MetBrewer)
library(inventR)
library(stringi)
library(terra)
library(gt)

#### Tool function
angle2dec = function(angle)
{
	x = stri_match(angle, regex = "([+-]?\\d+)°(\\d+)'(\\d+)") # To split the degree from minute and second
	x = apply(x[, 2:4], 1L, function(y) {
		y = as.numeric(y)
		y[1] + y[2]/60 + y[3]/3600
	})
	return(x)
}

#### Read data
os = Sys.info()[['sysname']]
mnt_point = "/mnt/local_share/"
if (!dir.exists(mnt_point))
	stop(paste0("The mounting point <", mnt_point, "> does not exist"))
path_data = paste0(mnt_point, "data/")
if (!dir.exists(path_data))
	stop(paste0("Folder <", path_data, "> does not exist! Check mounting point and mounted folder"))

forest_dt = readRDS(paste0(path_data, "nfi-inra_dt_full.rds"))
ind_species = readRDS(paste0(path_data, "ind_species_nfi-inra_full.rds"))
swiss_dt = readRDS(paste0(path_data, "switzerland.rds"))

coords_nfi = vect(paste0(path_data, "coords_nfi_full"))
coords_inra = vect(paste0(path_data, "coords_inra_full"))
coords_swiss = vect(paste0(path_data, "coords_switzerland"))
```

Le jeu de données est constitués principalement de *Quercus*, *Pinus*, et *Fagus* (voir @fig-data) et les parcelles sont couvrent la majeur partie du territoire français pour l'IFN tandis que les données du protocole Oudin sont beaucoup moins bien réparties sur le territoire (voir @fig-map).

```{r}
#| label: fig-data
#| fig-cap: Nombre d'individus par genre, avec les conifères en bleu et les feuillus en. Attention, échelle en $\\log_{10}$
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9
species_nb = unique(ind_species[["ind_species"]][, .(n_indiv = sum(n_indiv), colour), by = genus])[order(n_indiv)]

par(mar = c(5, 12, 2, 2))
# Use barplot f or horizontal bars
barplot(
	species_nb[, n_indiv],
	names.arg = species_nb[, genus],
	horiz = TRUE, # Horizontal bars
	xlab = "Number of individuals",
	ylab = "",
	main = "",
	las = 1,
	log = "x",
	col = species_nb[, colour]
)
```

```{r}
#| label: fig-map
#| fig-cap: "Location of the plots, with NFI for the Naional Forest Invetory of France, and EFM the Experimental Forest Monitoring of Switzerland [@Didion2024]"
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9

#### Coordinates
## Read shapefiles
switzerland = project(vect(paste0(path_data, "shapefiles/switzerland/CHE_adm0.shp")), coords_inra)
france = project(vect(paste0(path_data, "shapefiles/france/FRA_adm0.shp")), coords_inra)
belgium = project(vect(paste0(path_data, "shapefiles/belgium/gadm41_BEL_0.shp")), coords_inra)
italy = project(vect(paste0(path_data, "shapefiles/italy/gadm41_ITA_0.shp")), coords_inra)
luxembourg = project(vect(paste0(path_data, "shapefiles/luxembourg/gadm41_LUX_0.shp")), coords_inra)
germany = project(vect(paste0(path_data, "shapefiles/germany/gadm41_DEU_0.shp")), coords_inra)

fr_ch = project(rbind(france, switzerland), coords_inra)

## Projections
colours = met.brewer(name = "Lakota", n = 3)
names(colours) = c("nfi", "swiss", "inra")

## Plot
plot(fr_ch, lwd = 2, axes = FALSE)
points(coords_nfi, col = colours["nfi"], pch = 20, cex = 0.35)
points(coords_inra, col = colours["inra"], pch = 20, cex = 1.15)
points(project(coords_swiss, coords_inra), col = colours["swiss"], pch = 20, cex = 0.55)
plot(fr_ch, lwd = 2, add = TRUE, bg = "transparent")
plot(luxembourg, lwd = 2, add = TRUE)
plot(germany, lwd = 2, add = TRUE)
plot(belgium, lwd = 2, add = TRUE)
plot(italy, lwd = 2, add = TRUE)

legend(x = "bottomleft", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n", inset = c(0, 0.1))
```

Il y a aussi un biais dans la sélection des arbres en sus du biais géographique, comme le montre les figures de distribution des diamètres, des hauteurs, et des volumes (voir @fig-responses et @fig-responses2). Enfin, les données Emerge (C. Deleuze, *discussion*), comme les données suisse (Anne Herold-Bonardi, *discussion*), sont aussi biaisées sur la structure des arbres (principalement prélevé en futaies et taillis sous futaies) et ne sont pas représentatives des différents formes d'arbre sur le territoire.

```{r}
#| echo: false
#| label: fig-distrib_circumferences
#| fig-cap: Distribution of circumferences
#| layout-nrow: 3
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9
#| dev: tikz

# --- Circumferences
dd_fr = density(forest_dt[origin_data == "nfi", circumference_m]) # French NFI
dd_in = density(forest_dt[origin_data == "inra", circumference_m]) # Inra/Emerge data
dd_ch = density(swiss_dt[, circumference_m]) # swiss data

plot(dd_fr, col = colours["nfi"], axes = FALSE, lwd = 3, xlab = "Circumference (m)", main = "",
	ylim = c(0, max(dd_fr$y, dd_in$y, dd_ch$y)))
polygon(dd_fr, col = paste0(colours["nfi"], 44))

lines(dd_in, col = colours["inra"], lwd = 3)
polygon(dd_in, col = paste0(colours["inra"], 44))

lines(dd_ch, col = colours["swiss"], lwd = 3)
polygon(dd_ch, col = paste0(colours["swiss"], 44))

axis(1)
axis(2, las = 1)
legend(x = "topright", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n")
```

```{r}
#| echo: false
#| label: fig-distrib_heights
#| fig-cap: Distribution of heights
#| layout-nrow: 3
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9
#| dev: tikz

# --- Heights
dd_fr = density(forest_dt[origin_data == "nfi", height]) # French NFI
dd_in = density(forest_dt[origin_data == "inra", height]) # Inra/Emerge data
dd_ch = density(swiss_dt[, height]) # swiss data

plot(dd_fr, col = colours["nfi"], axes = FALSE, lwd = 3, xlab = "Height (m)", main = "",
	ylim = c(0, max(dd_fr$y, dd_in$y, dd_ch$y)))
polygon(dd_fr, col = paste0(colours["nfi"], 44))

lines(dd_in, col = colours["inra"], lwd = 3)
polygon(dd_in, col = paste0(colours["inra"], 44))

lines(dd_ch, col = colours["swiss"], lwd = 3)
polygon(dd_ch, col = paste0(colours["swiss"], 44))

axis(1)
axis(2, las = 1)
legend(x = "topright", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n")
```

```{r}
#| echo: false
#| label: fig-distrib_mySlenderness
#| fig-cap: "Distribution of slenderness ($h/\\sqrt{x}$)"
#| layout-nrow: 3
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9
#| dev: tikz

# --- Slenderness
dd_fr = density(forest_dt[origin_data == "nfi", height/sqrt(circumference_m)]) # French NFI
dd_in = density(forest_dt[origin_data == "inra", height/sqrt(circumference_m)]) # Inra/Emerge data
dd_ch = density(swiss_dt[, height/sqrt(circumference_m)]) # swiss data

plot(dd_fr, col = colours["nfi"], axes = FALSE, lwd = 3, xlab = "Slenderness ($h/\\sqrt{x}$)", main = "",
	ylim = c(0, max(dd_fr$y, dd_in$y, dd_ch$y)))
polygon(dd_fr, col = paste0(colours["nfi"], 44))

lines(dd_in, col = colours["inra"], lwd = 3)
polygon(dd_in, col = paste0(colours["inra"], 44))

lines(dd_ch, col = colours["swiss"], lwd = 3)
polygon(dd_ch, col = paste0(colours["swiss"], 44))

axis(1)
axis(2, las = 1)
legend(x = "topright", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n")
```

### Relation volume bois-fort tige *v.s.* circonférence
```{r}
#### Binding both forest_dt and swiss_dt
## Temporary data
temp = rbind(forest_dt[, .(plot_id, tree_id, genus, circumference_m,
		bole_volume_m3 = bole_volume_reconstruct_m3, crown_volume_m3, origin_data)],
	swiss_dt[, .(plot_id, tree_id, genus, circumference_m,
		bole_volume_m3 = bole_volume_cyl_m3, crown_volume_m3)], fill = TRUE)

## Origin data and colours
temp[is.na(origin_data), origin_data := "swiss"]
temp[, colour := colours[origin_data], by = origin_data]

## Remove genus that 
select_genus = temp[, .N, by = .(genus, origin_data)][, .N, by = genus][N > 1, genus]

## List genus and set keys
temp = temp[genus %in% select_genus]

setkey(temp, genus, origin_data)
ls_genus = unique(temp[, genus]) # Insured that it is sorter by alphabetical order
```

```{r}
#| label: fig-responses
#| fig-cap: "Relation volume *v.s.* circonférence pour les 17 genres présent dans au moins deux jeux de données parmis l'IFN, Emerge, et EFM (Experimental Forest Management, @Didion2024)"
#| fig-subcap:
#|   - "Abies"
#|   - "Acer"
#|   - "Betula"
#|   - "Carpinus"
#|   - "Castanea"
#|   - "Cedrus"
#|   - "Fagus"
#|   - "Fraxinus"
#|   - "Juglans"
#| 
#|   - "Larix"
#|   - "Picea"
#|   - "Pinus"      
#|   - "Populus"
#|   - "Prunus"
#|   - "Pseudotsuga"
#|   - "Quercus"
#|   - "Ulmus" 
#| layout-nrow: 3
#| layout-col: 3
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9

for (current_gen in ls_genus[1:9])
{
	pres_inra = FALSE
	pres_swiss = FALSE

	plot(temp[.(current_gen, "nfi"), circumference_m], temp[.(current_gen, "nfi"), bole_volume_m3], cex = 0.45,
		xlab = "Circumference (m)", ylab = "Bole volume (m³)", main = "", axes = FALSE, pch = 19, lwd = 0,
		col = colours["nfi"], xlim = c(0, max(temp[.(current_gen), circumference_m])))
	
	if (temp[.(current_gen, "inra"), .N, nomatch = NULL] > 0)
	{
		points(temp[.(current_gen, "inra"), circumference_m], temp[.(current_gen, "inra"), bole_volume_m3],
			cex = 0.55, col = colours["inra"], pch = 19, lwd = 0)
		pres_inra = TRUE
	}
		
	if (temp[.(current_gen, "swiss"), .N, nomatch = NULL] > 0)
	{
		points(temp[.(current_gen, "swiss"), circumference_m], temp[.(current_gen, "swiss"), bole_volume_m3],
			cex = 0.55, col = paste0(colours["swiss"], ifelse(pres_inra, "66", "FF")), pch = 19, lwd = 0)
		pres_swiss = TRUE
	}

	axis(1)
	axis(2, las = 1)

	if (pres_inra && pres_swiss)
		legend(x = "topleft", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n")
	if (pres_inra && !pres_swiss)
		legend(x = "topleft", legend = c("Emerge", "NFI"), fill = colours[c("inra", "nfi")], bty = "n")
	if (!pres_inra && pres_swiss)
		legend(x = "topleft", legend = c("NFI", "EFM"), fill = colours[c("nfi", "swiss")], bty = "n")
}
```


```{r}
#| label: fig-responses2
#| fig-cap: "Relation volume *v.s.* circonférence pour les 17 genres présent dans au moins deux jeux de données parmis l'IFN, Emerge, et EFM (Experimental Forest Management, @Didion2024)"
#| fig-subcap:
#|   - "Larix"
#|   - "Picea"
#|   - "Pinus"      
#|   - "Populus"
#|   - "Prunus"
#|   - "Pseudotsuga"
#|   - "Quercus"
#|   - "Ulmus" 
#| layout-nrow: 3
#| layout-col: 3
#| fig-asp: 1
#| out-width: 95%
#| fig-width: 9

for (current_gen in ls_genus[10:17])
{
	pres_inra = FALSE
	pres_swiss = FALSE

	plot(temp[.(current_gen, "nfi"), circumference_m], temp[.(current_gen, "nfi"), bole_volume_m3], cex = 0.45,
		xlab = "Circumference (m)", ylab = "Bole volume (m³)", main = "", axes = FALSE, pch = 19, lwd = 0,
		col = colours["nfi"], xlim = c(0, max(temp[.(current_gen), circumference_m])), cex.lab = 1.25)
	
	if (temp[.(current_gen, "inra"), .N, nomatch = NULL] > 0)
	{
		points(temp[.(current_gen, "inra"), circumference_m], temp[.(current_gen, "inra"), bole_volume_m3],
			cex = 0.55, col = colours["inra"], pch = 19, lwd = 0)
		pres_inra = TRUE
	}
		
	if (temp[.(current_gen, "swiss"), .N, nomatch = NULL] > 0)
	{
		points(temp[.(current_gen, "swiss"), circumference_m], temp[.(current_gen, "swiss"), bole_volume_m3],
			cex = 0.55, col = paste0(colours["swiss"], ifelse(pres_inra, "66", "FF")), pch = 19, lwd = 0)
		pres_swiss = TRUE
	}

	axis(1, cex.axis = 1.25)
	axis(2, las = 1, cex.axis = 1.25)

	if (pres_inra && pres_swiss)
		legend(x = "topleft", legend = c("Emerge", "NFI", "EFM"), fill = colours[c("inra", "nfi", "swiss")], bty = "n",
		cex = 1.25)
	if (pres_inra && !pres_swiss)
		legend(x = "topleft", legend = c("Emerge", "NFI"), fill = colours[c("inra", "nfi")], bty = "n", cex = 1.25)
	if (!pres_inra && pres_swiss)
		legend(x = "topleft", legend = c("NFI", "EFM"), fill = colours[c("nfi", "swiss")], bty = "n", cex = 1.25)
}
```

## Historique des tarifs {#sec-hist}

## Pistes explorables {#sec-pistes}


## References

::: {#refs}
:::